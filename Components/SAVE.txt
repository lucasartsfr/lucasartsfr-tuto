import React from 'react';
import Player from '@/Components/Player';
import List from '@/Components/List';
import { useRouter } from 'next/router';
import FormationSubPage from './[FormationsSubPage]';

export default function Formations(props){
  const router = useRouter();
  const { formation } = router.query;
  console.log(formation)

  return (
    <div>
      <h1>{formation}</h1>
      {formation && (
        <Link href="/[formation]/[subpage]" as={`/${formation}/test`}>
          <a>Go to subpage</a>
        </Link>
      )}
      <FormationSubPage formation={formation} />
    </div>
  );
};



// Get Videos
// export async function getStaticProps(context){
//   const slug = context.params.Formations;  
//   const { getVideoDurationInSeconds } = require('get-video-duration')
//   const fs = require("fs");
//   const ffmpeg = require('ffmpeg-static');
//   const Directory = './public/formations/'+slug;
//   const PublicDirectory = Directory.split("./public")[1];

//   return new Promise(async (resolve, reject) => {
//     fs.readdir(Directory, async (err, files) => {
//       if (err) {
//         reject(err);
//       } else {
//         const videos = await Promise.all(files.map(async name => {
//           const duration = await getVideoDurationInSeconds(`${Directory}/${name}`);
//           return {
//             Name: name,
//             Duration: duration,
//           };
//         }));
//         resolve({
//           props : {
//             videos,
//             PublicDirectory
//           },
//           revalidate: 3600,
//         });
//       }
//     });
//   });
// }

export const getStaticProps = async ({ params }) => {

  console.log(params);
 
  return {
    props: {
      params,
    },
  };
};

// Create Paths
export const getStaticPaths = async () => {
  const files = ['Lightroom', 'Photoshop', 'Lightroom/Test']

    const paths = files.map(name => {
      const segments = name.split('/');
      return {
        params: {
          Formations: segments[0],
          subPage: segments[1],
        },
      };
    });

  console.log(paths);

  return {
    paths,
    fallback: true,
  };
};

